{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/xeno/Documents/nextjs/nextjs-express-ts/src/pages/posts/workloadchart-2.tsx\";\nimport Layout from '../../../components/Layout';\nimport Chart from 'react-google-charts';\nimport axios from 'axios';\n\nfunction workloadChart(props) {\n  var today = new Date();\n  var todayStr = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n\n  var timeStr = function timeStr(sec) {\n    return new Date(todayStr + ' ' + new Date(sec * 1000).toISOString().substr(11, 8)).toTimeString();\n  };\n\n  function getData() {\n    return _getData.apply(this, arguments);\n  } //getData()\n\n\n  function _getData() {\n    _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tableInfo, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // create a new XMLHttpRequest\n              tableInfo = [{\n                type: 'string',\n                id: 'Station'\n              }, {\n                type: 'string',\n                id: 'dummy bar label'\n              }, {\n                type: 'string',\n                role: 'tooltip'\n              }, {\n                type: 'number',\n                id: 'Start'\n              }, {\n                type: 'number',\n                id: 'End'\n              }];\n              _context.next = 3;\n              return axios.get('http://localhost:1880/workloadraw');\n\n            case 3:\n              response = _context.sent;\n              data = response.data;\n              /* for (let i = 0; i < data.length; i++) {\n                data[i][3] = timeStr(data[i][3])\n                data[i][4] = timeStr(data[i][4])\n              } */\n\n              data.unshift(tableInfo);\n              console.log(data);\n              return _context.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getData.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        width: '100%',\n        height: '85vh',\n        chartType: \"Timeline\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Workload Gantt Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 19\n        }, this),\n        data: getData()\n        /* data={[\n          [\n            { type: 'string', id: 'Station' },\n            { type: 'string', id: 'dummy bar label' },\n            { type: 'string', role: 'tooltip' },\n            { type: 'datetime', id: 'Start' },\n            { type: 'datetime', id: 'End' },\n          ],\n          [\n            'Packing(F4)',\n            '',\n            'task: Working<br/>productName: Product3_TypeA_B<br/>processName: Product3_TypeA_B<br/>index: 3<br/>part: 1<br/>duration: 00:04:00',\n            12480,\n            15480,\n          ],\n          [\n            'Storage(F1)',\n            '',\n            'task: Working<br/>productName: Product5_TypeB_G<br/>processName: Product5_TypeB_G<br/>index: 0<br/>part: 6<br/>duration: 00:48:00',\n            9600,\n            12480,\n          ],\n        ]} */\n        ,\n        options: {\n          height: 400,\n          timeline: {\n            colorByRowLabel: true\n          },\n          labelStyle: {\n            fontSize: 13\n          },\n          AllowHtml: true,\n          colors: ['#111e6c', '#1d2951', '#597387', '#003152', '#000080', '#0e4d92', '#1034a6', '#0080ff', '#0f52ba', '#008ecc', '#6593f5', '#4c516d', '#008081', '#73c2fb', '#7285a5', '#4f97a3', '#57a0d3', '#4682b4', '#81d8d0', '#89cff0', '#588bae', '#7ef9ff', '#95c8d8', '#b0dfe5', '#3fe0d0']\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\nexport default workloadChart;","map":{"version":3,"sources":["/Users/xeno/Documents/nextjs/nextjs-express-ts/src/pages/posts/workloadchart-2.tsx"],"names":["Layout","Chart","axios","workloadChart","props","today","Date","todayStr","getFullYear","getMonth","getDate","timeStr","sec","toISOString","substr","toTimeString","getData","tableInfo","type","id","role","get","response","data","unshift","console","log","height","timeline","colorByRowLabel","labelStyle","fontSize","AllowHtml","colors"],"mappings":"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","sourcesContent":["import Layout from '../../../components/Layout'\nimport Chart from 'react-google-charts'\nimport axios from 'axios'\n\nfunction workloadChart(props) {\n  const today = new Date()\n  const todayStr = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()\n  const timeStr = function (sec: number) {\n    return new Date(\n      todayStr + ' ' + new Date(sec * 1000).toISOString().substr(11, 8)\n    ).toTimeString()\n  }\n  async function getData() {\n    // create a new XMLHttpRequest\n    const tableInfo = [\n      { type: 'string', id: 'Station' },\n      { type: 'string', id: 'dummy bar label' },\n      { type: 'string', role: 'tooltip' },\n      { type: 'number', id: 'Start' },\n      { type: 'number', id: 'End' },\n    ]\n    const response = await axios.get('http://localhost:1880/workloadraw')\n    const data = response.data\n    /* for (let i = 0; i < data.length; i++) {\n      data[i][3] = timeStr(data[i][3])\n      data[i][4] = timeStr(data[i][4])\n    } */\n    data.unshift(tableInfo)\n    console.log(data)\n    return data\n  }\n  //getData()\n  return (\n    <Layout>\n      <div>\n        {/*         <h1>Workload Chart Page</h1>\n        <p>Show Workload Gantt Chart from GD.findi execution.</p> */}\n        <Chart\n          width={'100%'}\n          height={'85vh'}\n          chartType=\"Timeline\"\n          loader={<div>Loading Workload Gantt Chart</div>}\n          data={getData()}\n          /* data={[\n            [\n              { type: 'string', id: 'Station' },\n              { type: 'string', id: 'dummy bar label' },\n              { type: 'string', role: 'tooltip' },\n              { type: 'datetime', id: 'Start' },\n              { type: 'datetime', id: 'End' },\n            ],\n            [\n              'Packing(F4)',\n              '',\n              'task: Working<br/>productName: Product3_TypeA_B<br/>processName: Product3_TypeA_B<br/>index: 3<br/>part: 1<br/>duration: 00:04:00',\n              12480,\n              15480,\n            ],\n            [\n              'Storage(F1)',\n              '',\n              'task: Working<br/>productName: Product5_TypeB_G<br/>processName: Product5_TypeB_G<br/>index: 0<br/>part: 6<br/>duration: 00:48:00',\n              9600,\n              12480,\n            ],\n          ]} */\n          options={{\n            height: 400,\n            timeline: { colorByRowLabel: true },\n            labelStyle: {\n              fontSize: 13,\n            },\n            AllowHtml: true,\n            colors: [\n              '#111e6c',\n              '#1d2951',\n              '#597387',\n              '#003152',\n              '#000080',\n              '#0e4d92',\n              '#1034a6',\n              '#0080ff',\n              '#0f52ba',\n              '#008ecc',\n              '#6593f5',\n              '#4c516d',\n              '#008081',\n              '#73c2fb',\n              '#7285a5',\n              '#4f97a3',\n              '#57a0d3',\n              '#4682b4',\n              '#81d8d0',\n              '#89cff0',\n              '#588bae',\n              '#7ef9ff',\n              '#95c8d8',\n              '#b0dfe5',\n              '#3fe0d0',\n            ],\n          }}\n        ></Chart>\n      </div>\n    </Layout>\n  )\n}\n\nexport default workloadChart\n"]},"metadata":{},"sourceType":"module"}